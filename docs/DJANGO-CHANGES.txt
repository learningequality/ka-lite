python-packages/django/utils/cache.py:168 
requires package additions:
import logging
from django.utils.translation import get_language_from_request
        # DJANGO_CHANGE(bcipolli)
        # The existing django logic here is completely different than the 
        #   django translations pathway, which uses the more nuanced
        #   get_language_from_request.  For consistency and good interaction,
        #   cache should be using THAT.  
        cache_key += '.%s' % get_language_from_request(request)


python-packages/django/utils/translation/trans_real.py:430
    # DJANGO_CHANGE(bcipolli):
    # run settings.LANGUAGE_CODE through same gauntlet as above
    # Otherwise, if we try to default to a sub-language (en-us), but only 
    # the base language is installed (en), we'll get different behavior
    # based on client (some of which hit this fallback) IF the sub-language
    # is not installed.
    #
    # Since apps can't necessarily control that, we want the same fall-back
    # on LANGUAGE_CODE as for everything else.
    lang_code = settings.LANGUAGE_CODE

    if lang_code and lang_code not in supported:
        lang_code = lang_code.split('-')[0] # e.g. if fr-ca is not supported fallback to fr

    if lang_code and lang_code in supported and check_for_language(lang_code):
        return lang_code
    else:
        raise Exception("No language code could be determined; even fall-back on settings.LANGUAGE_CODE (%s) failed!" % settings.LANGUAGE_CODE)

 