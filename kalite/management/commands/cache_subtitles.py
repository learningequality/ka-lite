# Cache subtitles

import datetime
import json
import logging
import os
import sys
import time
import zipfile

from optparse import make_option

from django.core.management.base import BaseCommand, CommandError
from django.core.management import call_command

from generate_subtitle_map import data_path, SRTS_JSON_FILENAME, LANGUAGE_SRT_FILENAME, headers
from utils.subtitles import subtitle_utils, generate_srt_counts 

PROJECT_PATH = os.path.dirname(os.path.realpath(__file__)) + "/../../"
sys.path = [PROJECT_PATH] + sys.path
import settings

logger = subtitle_utils.setup_logging("cache_subtitles")

download_path = settings.STATIC_ROOT + "srt/"


class LanguageCodeDoesNotExist(Exception):

    def __str__(value):
        return "The language code specified does not have any available subtitles for download."


def prepare_for_download(options):
    """Download subtitles specified by command line args"""
    # json generated by download_subtitles.py (this file)
    language_srt_map = json.loads(open(
        data_path + LANGUAGE_SRT_FILENAME).read())

    lang_code = options.get("language")

    # if lang_code specified, do those, if not do all
    if lang_code:
        try:
            vids_in_language = language_srt_map.get(lang_code)
        except:
            raise LanguageCodeDoesNotExist()
        download_if_criteria_met(vids_in_language, options, lang_code)

    else:
        for lang_code, videos in language_srt_map.items():
            download_if_criteria_met(videos, options, lang_code)


def download_if_criteria_met(videos, options, lang_code):
    """Execute download of subtitle if it meets the criteria specified by the command line args"""

    redo_requested = options.get("redo")
    response_code = options.get("response_code")
    date_specified = subtitle_utils.convert_date_input(options.get("date_since_attempt"))

    for youtube_id, entry in videos.items():
        last_attempt = entry.get("last_attempt")
        api_response = entry.get("api_response")
        previously_downloaded = entry.get("downloaded")

        # HELP: I feel like this set of logic gates could be more efficient or
        # easier to read
        date_test_passed = False
        response_code_test = False

        if date_specified:
            if not last_attempt or datetime.datetime.strptime(last_attempt, '%Y-%m-%d') < date_specified:
                date_test_passed = True
            else:
                logger.info(
                    "Last attempt more recent than specified date. Moving on.")
        # response code must be specified, so it must exist
        if response_code == "all" or response_code == api_response:
            response_code_test = True
        else:
            logger.info(
                "API response doesn't match specified HTTP status code. Moving on.")

        # HELP: not feeling to good stylistically for having this extra block 
        download_it = False
        if date_specified and date_test_passed and response_code_test:
            download_it = True
        elif not date_specified and response_code_test:
            download_it = True

        if download_it:
            if not previously_downloaded or redo_requested:
                logger.info("Attempting to download subtitle for lang: %s and YouTube ID: %s" % (lang_code, youtube_id))
                response = download_subtitle(youtube_id, lang_code, format="srt")
                time_of_attempt = unicode(datetime.datetime.now().date())
                if response == "client-error" or response == "server-error":
                    logger.info("Updating JSON file to record %s." % response)
                    update_json(
                        youtube_id, lang_code, previously_downloaded, response, time_of_attempt)
                else:
                    dirpath = download_path + lang_code + "/"
                    filename = youtube_id + ".srt"
                    fullpath = dirpath + filename
                    logger.info("Writing file to %s" % fullpath)
                    subtitle_utils.ensure_dir(dirpath)

                    with open(fullpath, 'w') as fp:
                        fp.write(response.encode('UTF-8'))

                    logger.info("Updating JSON file to record xe.")
                    update_json(youtube_id, lang_code, True, "success", time_of_attempt)
            else:
                logger.info(
                    "Already downloaded. To redownload, run again with -R.")


def download_subtitle(youtube_id, language, format="srt"):
    """Return subtitles for YouTube ID in language specified. Return False if they do not exist. Update local JSON accordingly."""

    api_info_map = json.loads(open(data_path + SRTS_JSON_FILENAME).read())
    # get amara id
    amara_code = api_info_map.get(youtube_id).get("amara_code")

    # make request
    base_url = "https://amara.org/api2/partners/videos"

    if format == "srt":
        r = subtitle_utils.make_request(headers, "%s/%s/languages/%s/subtitles/?format=srt" % (
            base_url, amara_code, language))
        if r:
            # return the subtitle text, replacing empty subtitle lines with
            # spaces to make the FLV player happy
            try:
                response = (r.text or "").replace("\n\n\n", "\n   \n\n").replace("\r\n\r\n\r\n", "\r\n   \r\n\r\n")
            except: 
                response = r 
            return response
    return False


def update_json(youtube_id, lang_code, downloaded, api_response, time_of_attempt):
    """Update language_srt_map to reflect download status"""
    #Open JSON file
    filepath = data_path + LANGUAGE_SRT_FILENAME
    language_srt_map = json.loads(open(filepath).read())

    # create updated entry
    entry = language_srt_map[lang_code][youtube_id] 
    entry["downloaded"] = downloaded
    entry["api_response"] = api_response
    entry["last_attempt"] = time_of_attempt
    if api_response == "success":
        entry["last_success"] = time_of_attempt

    # update full-size JSON with new information
    language_srt_map[lang_code][youtube_id].update(entry)

    # write it to file
    logger.info("File updated.")
    json_file = open(filepath, "w+")
    json_file.write(json.dumps(language_srt_map))
    json_file.close()

def generate_zipped_srts(language_updated):
    zip_path = settings.MEDIA_ROOT + "subtitles/"
    subtitle_utils.ensure_dir(zip_path)
    locale_path = settings.LOCALE_PATHS[0]
    lang_dirs = os.listdir(locale_path)
    for lang_code in lang_dirs:
        if (language_updated and language_updated == lang_code) or (not language_updated):
            if "subtitles" in os.listdir(locale_path + lang_code):
                zf = zipfile.ZipFile('%s%s_subtitles.zip' % (zip_path, lang_code), 'w')
                for root, dirs, files in os.walk("%s%s/subtitles/" % (locale_path, lang_code)):
                    for f in files:
                        zf.write(os.path.join(root, f), arcname=f)
                zf.close()
                logger.info("Zipped up a new pack for language code: %s" % lang_code)

class Command(BaseCommand):
    help = "Update the mapping of subtitles available by language for each video. Location: static/data/subtitledata/video_srts.json"

    option_list = BaseCommand.option_list + (
        make_option('-l', '--language',
                    action='store',
                    dest='language',
                    default=None,
                    help="Specify a particular language code to download subtitles for. Can be used with -R to update previously downloaded subtitles.",
                    metavar="LANG_CODE"),
        make_option('-R', '--redo', 
                    action='store_true',
                    dest='redo',
                    default=False,
                    help="Re-download previously downloaded subtitles to refresh the repo. Can be used with -l. Default behavior is to not re-download subtitles we already have.",
                    metavar="REDO"),
        make_option('-d', '--date_since_attempt',
                    action='store',
                    dest='date_since_attempt',
                    default=None,
                    help="Setting a date flag will update only those entries which have not been attempted since that date. Can be combined with -r. This could potentially be useful for updating old subtitles. USAGE: '-d MM/DD/YYYY'.",
                    metavar="DATE"),
        make_option('-r', '--response_code', 
                    action='store',
                    dest='response_code',
                    default=None,
                    help="Which api-response code to recheck. Can be combined with -d. USAGE: '-r all', '-r client-error', or '-r server-error'. This option is required!",
                    metavar="RESP_CODE"),
    )

    def handle(self, *args, **options):
        if options.get("response_code"):
            prepare_for_download(options)
        else:
            raise CommandError(
                "Invalid input. Please read the usage instructions more carefully and try again. Remember to specify a response code! (-r)")

        logger.info("Executed successfully! Generating new subtitle counts!")
        generate_srt_counts.update_srt_availability()
        
        # NOTE: not zipping for the time being, just exposing individually on the playground
        # logger.info("Executed successfully! Re-zipping changed language packs!")
        # generate_zipped_srts(options.get("language"))

        logger.info("Process complete.")
        sys.exit(1)
